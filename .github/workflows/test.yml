---
name: dev-images

# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#onpushpull_requestbranchestags
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

env:
  IMAGE_NAME: jsloan117/docker-openvpn-client

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v2.4.0

      # # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      # # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build Image
        uses: docker/build-push-action@v2.7.0
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ github.ref }}
          push: false
          load: true

      # https://github.com/marketplace/actions/anchore-sbom-action
      - name: Anchore SBOM Action
        uses: anchore/sbom-action@v0.6.0
        with:
          image: ${{ env.IMAGE_NAME }}:${{ github.ref }}

      # https://github.com/marketplace/actions/anchore-container-scan
      - name: Anchore Container Scan
        uses: anchore/scan-action@v3.2.0
        id: scan
        with:
          image: ${{ env.IMAGE_NAME }}:${{ github.ref }}
          acs-report-enable: true
          fail-build: true
          severity-cutoff: critical

      # https://github.com/github/codeql-action
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      - name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  build-push:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: scan
    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v2.4.0

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v3.6.2
        with:
          # ${{ env.IMAGE_NAME }} # commenting this out temp while only trying to push to GHCR
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch

      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
        id: buildx
        with:
          install: true
          version: latest

      # https://github.com/marketplace/actions/docker-login
      # - name: Login to Docker Hub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v1.12.0
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.12.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push
        id: build
        uses: docker/build-push-action@v2.7.0
        with:
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
