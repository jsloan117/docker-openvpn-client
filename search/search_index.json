{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"OpenVPN Client  <p>   Container image that provides multiple VPN providers for OpenVPN    </p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Below is a quick method to get this up and running. Please see Running the image for more details.</p> <pre><code>docker run --cap-add=NET_ADMIN -d --name openvpn_client \\\n-e OPENVPN_PROVIDER='vyprvpn' \\\n-e OPENVPN_CONFIG='USA - Austin-256' \\\n-e OPENVPN_USERNAME='user' \\\n-e OPENVPN_PASSWORD='password' \\\n--dns 1.1.1.1 --dns 1.0.0.1 \\\njsloan117/docker-openvpn-client\n</code></pre>"},{"location":"#credit","title":"Credit","text":"<p>Thank you Haugene and all contributors for making a great image.</p> <p>If you need anymore details this image is based on this and their documentation may be beneficial depending on your environment.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#required-variables","title":"Required variables","text":"<p><code>OPENVPN_PROVIDER</code> is the only required variable, all others below are optional.</p> Variable Function Example <code>OPENVPN_PROVIDER</code> VPN provider <code>OPENVPN_PROVIDER=VYPRVPN</code>"},{"location":"configuration/#credentials","title":"Credentials","text":"<p>OpenVPN's username and password can be passed in as a config file via a mount point, docker secrets or environment variables.</p> Variable Function Example <code>OPENVPN_USERNAME</code> VPN username <code>OPENVPN_USERNAME=user</code> <code>OPENVPN_PASSWORD</code> VPN password <code>OPENVPN_PASSWORD=password</code>"},{"location":"configuration/#network","title":"Network","text":"<p>The <code>OPENVPN_CONFIG</code> variable is optional to set, but is good practice. If no config is given, a default config will be selected for the provider you have chosen.</p> <p>Find available OpenVPN configs by looking in the openvpn folder of the vpn-configs-contrib repository, or by checking your providers site.</p> <p>The value that you should use is the filename of your chosen openvpn configuration without the .ovpn file extension.</p> openvpn config <pre><code>-e \"OPENVPN_CONFIG=USA - Austin-256\"\n</code></pre> Variable Function Example <code>OPENVPN_CONFIG</code> VPN endpoint to use <code>OPENVPN_CONFIG=USA - Austin-256</code> <code>OPENVPN_OPTS</code> OpenVPN startup options See OpenVPN doc <code>LOCAL_NETWORK</code> Sets the local network that should have access. Accepts comma separated list. <code>LOCAL_NETWORK=192.168.0.0/24</code> <code>CREATE_TUN_DEVICE</code> Creates /dev/net/tun device inside the container <code>CREATE_TUN_DEVICE=true</code>"},{"location":"configuration/#firewall","title":"Firewall","text":"Variable Function Example <code>ENABLE_UFW</code> Enables ufw firewall <code>ENABLE_UFW=true</code> <code>UFW_ALLOW_GW_NET</code> Allows the gateway network through the firewall. False defaults to only allowing the gateway. <code>UFW_ALLOW_GW_NET=true</code> <code>UFW_EXTRA_PORTS</code> Allows the comma separated list of ports through the firewall. Respects UFW_ALLOW_GW_NET. <code>UFW_EXTRA_PORTS=9910,23561,443</code>"},{"location":"configuration/#health-check","title":"Health check","text":"<p>Docker will run a health check on the container every minute to see if it is still connected to the Internet.</p> <p>By default, this is done by pinging google.com twice. You can change the host that is pinged.</p> Variable Function Example <code>HEALTH_CHECK_HOST</code> This host is pinged to check if the network connection still works <code>google.com</code>"},{"location":"configuration/#s6-overlay","title":"s6-overlay","text":"<p>If you encounter a timeout error like the below, you may need to adjust the <code>S6_CMD_WAIT_FOR_SERVICES_MAXTIME</code> value.</p> <p>There are more environment variables for s6 and information on them can be found here.</p> Error <pre><code>s6-rc: fatal: timed out\ns6-sudoc: fatal: unable to get exit status from server: Operation timed out\n</code></pre> Variable Function Example <code>S6_CMD_WAIT_FOR_SERVICES_MAXTIME</code> Global timeout value in milliseconds for all services. You can disable it by setting this variable to <code>0</code>. <code>60000</code>"},{"location":"configuration/#custom-scripts","title":"Custom scripts","text":"<p>If the need arises to run custom scripts before or after OpenVPN is executed, you can do so. While this is not the only way (s6-rc-services), it is probably the easiest.</p> <p>Custom scripts are located in <code>/etc/cont-init.d</code> and <code>/etc/cont-finish.d</code> directories, depending on when you want them executed.</p> <p>You will need to make sure your scripts are executable. Then mount your scripts directories to one of or both of the directories above.</p> <p>They will automatically be executed before or after OpenVPN does sequentially. Have a look at s6-init-stages for more details.</p> pre-openvpn-script <pre><code># /etc/cont-init.d/05-inject-env-var-into-s6.sh\nprintf '%s' \"${MY_IMPORTANT_VARIABLE}\" &gt; /run/s6/container_environment/MY_IMPORTANT_VARIABLE\n</code></pre> post-openvpn-script <pre><code># /etc/cont-finish.d/04-remove-junk.sh\nrm -f /tmp/junkfiles\n</code></pre>"},{"location":"run-image/","title":"Running the image","text":"<p>This image is available from Docker's and GitHub's registries and this is the simplest way to get it.</p> <p>Note</p> <p>You must set at least the <code>OPENVPN_PROVIDER</code> variable, and provide your VPN credentials for this image to work.</p> <p>Please see configuration for more details on each variable.</p>"},{"location":"run-image/#running-the-image","title":"Running the image","text":"<p>To run the image use one of (or combination of) the below methods.</p>"},{"location":"run-image/#docker-run-with-env-file","title":"Docker run with env-file","text":"<p>This method is a little cleaner since your variables are stored in a file verses passed at the cli. The openvpn.env file is an example of this.</p> <pre><code>docker run --cap-add=NET_ADMIN -d --name openvpn_client \\\n--env-file ~/openvpn.env \\\n--dns 1.1.1.1 --dns 1.0.0.1 \\\njsloan117/docker-openvpn-client\n</code></pre>"},{"location":"run-image/#docker-run-without-env-file","title":"Docker run without env-file","text":"<pre><code>docker run --cap-add=NET_ADMIN -d --name openvpn_client \\\n-e OPENVPN_PROVIDER='vyprvpn' \\\n-e OPENVPN_CONFIG='USA - Austin-256' \\\n-e OPENVPN_USERNAME='user' \\\n-e OPENVPN_PASSWORD='password' \\\n--dns 1.1.1.1 --dns 1.0.0.1 \\\njsloan117/docker-openvpn-client\n</code></pre>"},{"location":"run-image/#docker-run-all-variables","title":"Docker run all variables","text":"<p>This example shows all variables you're able to use to modify the behavior of the image.</p> <pre><code>docker run --cap-add=NET_ADMIN -d --name openvpn_client \\\n-e OPENVPN_USERNAME='user' \\\n-e OPENVPN_PASSWORD='password' \\\n-e OPENVPN_PROVIDER='vyprvpn' \\\n-e OPENVPN_OPTS='--user abc --group abc --auth-nocache --inactive 3600 --ping 10 --ping-exit 60' \\\n-e OPENVPN_CONFIG='USA - Austin-256' \\\n-e LOCAL_NETWORK='192.168.0.0/16' \\\n-e CREATE_TUN_DEVICE='true' \\\n-e ENABLE_UFW='true' \\\n-e UFW_ALLOW_GW_NET='true' \\\n-e UFW_EXTRA_PORTS='8080,9091' \\\n-e HEALTH_CHECK_HOST='google.com' \\\n-e S6_CMD_WAIT_FOR_SERVICES_MAXTIME='60000' \\\n--dns 1.1.1.1 --dns 1.0.0.1 \\\njsloan117/docker-openvpn-client\n</code></pre>"},{"location":"run-image/#docker-compose","title":"Docker compose","text":"<p>See the docker-compose.yml in this repo for an example.</p>"},{"location":"run-image/#docker-secrets","title":"Docker secrets","text":"<p>You can use docker secrets with docker compose or docker swarm. The below steps assumes you're using docker compose.</p> <p>Note</p> <p>Docker secrets within the context of compose inherits the file's ownership and permissions from the host.</p> <ul> <li>remove <code>OPENVPN_USERNAME</code> and <code>OPENVPN_PASSWORD</code> from the environment section of your compose file</li> <li>add your credentials username and password each on a line in a file named <code>vpncreds</code><ul> <li>ensure correct ownership and permissions of that file <code>vpncreds</code></li> </ul> </li> <li>add the below snippet to your compose file</li> </ul>"},{"location":"run-image/#compose-file-snippet","title":"Compose file snippet","text":"<pre><code>version: '3.8'\nservices:\ndocker-openvpn-client:\n...\nsecrets:\n- vpncreds\nsecrets:\nvpncreds:\nfile: ./vpncreds\n</code></pre>"},{"location":"run-image/#vpncreds-file","title":"vpncreds file","text":"<pre><code>your_vpn_username\nyour_vpn_password\n</code></pre>"},{"location":"s6-overlay/","title":"Init system","text":"<p>s6-overlay is the init system installed in the image. Just like a regular init-system it runs a PID 1, and all other processes after after that.</p> <p>The tag v3.0.0 is utilizing version 2.x of s6. Since then v3 has been released and it's a complete rewrite.</p> <p>I've taken partial snippets of the s6-overlay readme that I thought were useful to understand quickly. This page is not meant to replace it (readme) nor the s6 docs they are very detailed.</p>"},{"location":"s6-overlay/#init-stages","title":"Init stages","text":"<p>This section briefly explains how the init stages work for s6-overlay. If you need more details check out s6-overlay's readme.</p> <ol> <li>stage 1: s6-overlay black magic and container setup details.</li> <li>stage 2: This is where most of the end-user provided files are meant to be executed:<ol> <li>(legacy) - Sequentially execute one-shot initialization scripts in <code>/etc/cont-init.d</code>.</li> <li>Services in the <code>user</code> bundle are started by s6-rc, in an order defined by dependencies.</li> <li>(legacy) - Longrun services in <code>/etc/services.d</code> are started.</li> </ol> </li> <li>stage 3: This is the shutdown stage. When the container is supposed to exit, it will:<ol> <li>(legacy) - Longrun services in <code>/etc/services.d</code> are stopped.</li> <li>All s6-rc services are stopped, in an order defined by dependencies.</li> <li>(legacy) - Sequentially execute one-shot finalization scripts in <code>/etc/cont-finish.d</code>.</li> </ol> </li> </ol>"},{"location":"s6-overlay/#s6-rc-services","title":"s6-rc services","text":"<p>I will outline the core directory structure of the new <code>s6-rc</code> service format since its quite different than v2.</p> <p>For more details check out s6-rc-compile. You can always check out this image's repo and see how I created them. Or look at linuxserver's images, that is how I started.</p> <p>This image doesn't use many of the files you can use for s6 services, nor will I go into detail on them. Again refer to the link above.</p> <p>Services are now created under <code>/etc/s6-overlay/s6-rc.d</code> instead of <code>/etc/services.d</code>.</p> my_service_name service directory <pre><code>/etc/s6-overlay/s6-rc.d/my_service_name\n</code></pre> <p>Create a file named <code>type</code>, that contains only <code>oneshot</code>, <code>longrun</code> or <code>bundle</code>. This file declares the type of service you want.</p> service type <pre><code>cat /etc/s6-overlay/s6-rc.d/my_service_name/type\nlongrun\n</code></pre> <p>Create a file named <code>run</code> for <code>longrun</code> services or a file named <code>up</code> for <code>oneshot</code> services. This should contain your code to run the <code>my_service_name</code> service.</p> service run script <pre><code>cat /etc/s6-overlay/s6-rc.d/my_service_name/run\n#!/command/execlineb -P\nmy_service_name_daemon\n</code></pre> <p>Optionally create a file named <code>finish</code> for <code>longrun</code> services or a file named <code>down</code> for <code>oneshot</code> services.</p> <p>Create a empty file named after your service, in the <code>user</code> bundle directory. This is how your service will be started.</p> user bundle <pre><code>/etc/s6-overlay/s6-rc.d/user/contents.d/my_service_name\n</code></pre> <p>If <code>my_service_name</code> depends on <code>some_other_service</code> running before it, create a <code>dependencies.d</code> directory.</p> <p>Then create a empty file named after that depended upon service in the <code>dependencies.d</code> directory.</p> dependencies <pre><code>/etc/s6-overlay/s6-rc.d/my_service_name/dependencies.d\n/etc/s6-overlay/s6-rc.d/my_service_name/dependencies.d/some_other_service\n</code></pre>"},{"location":"s6-overlay/#additional-documentation-and-information","title":"Additional documentation and information","text":"<p>Here are a few links that contain a lot more information then I care to write .</p> <p>If you need to set an environment variable in <code>some_service</code> and use it in <code>some_other_service</code>, you may need to add it to s6's container_environment directory.</p> s6 container environment <pre><code>printf '%s' \"${variable_name}\" &gt; /run/s6/container_environment/variable_name\n</code></pre> <ul> <li>s6-overlay readme</li> <li>move-to-v3</li> <li>s6-rc-compile</li> <li>servicedir</li> <li>execlineb</li> <li>s6-setuidgid</li> </ul>"},{"location":"signing-security/","title":"Image signing and security","text":"<p>All of these things (signing, scanning, etc) are pretty new to me and this page may not always reflect the truth.</p> <p>Mainly at this time, that is how/where security reports are handled within Github. Where/how do I share them etc.</p>"},{"location":"signing-security/#image-signing","title":"Image Signing","text":"<p>The image is signed using cosign by sigstore. You can verify any v3+ image using the below key or the key with that release.</p>"},{"location":"signing-security/#public-key","title":"Public key","text":"<pre><code>-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEPU9CpTEhHeNOpkQ7/oiBSbhYuxnC\n4jnZ1BB7oOK91iLMEI3YjoqFvRRBQbmba8Cjh3HOvmLBFEukA1cOi+6J+g==\n-----END PUBLIC KEY-----\n</code></pre>"},{"location":"signing-security/#verify-image","title":"Verify image","text":"<pre><code>cosign verify --key cosign.pub jsloan117/docker-openvpn-client:v3\n</code></pre>"},{"location":"signing-security/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<p>Image scanning is handled using grype by Anchore. If any critical vulnerabilities are found the pipeline will fail.</p> <p>The results of the scan should be available in the security tab of Github and as an artifact with each run of the pipeline.</p>"},{"location":"signing-security/#software-bill-of-materials-sbom","title":"Software Bill Of Materials (SBOM)","text":"<p>SBOM generation is handled using syft by Anchore, in spdx-json format.</p> <p>It will be uploaded as an artifact with each run of the pipeline. For releases it will be uploaded as an asset.</p>"},{"location":"signing-security/#check-package-name-and-their-version","title":"Check package name and their version","text":"<pre><code>jq -r '.packages[] | {name, versionInfo}' jsloan117-docker-openvpn-client_v1.7.1.spdx.json\n</code></pre> <pre><code>{\n\"name\": \"unzip\",\n\"versionInfo\": \"6.0-r9\"\n}\n{\n\"name\": \"xz-libs\",\n\"versionInfo\": \"5.2.5-r0\"\n}\n{\n\"name\": \"zlib\",\n\"versionInfo\": \"1.2.11-r3\"\n}\n</code></pre>"},{"location":"supported-providers/","title":"Supported providers","text":""},{"location":"supported-providers/#internal-providers","title":"Internal providers","text":"<p>These providers have had a script created for them to automatically download configs, directly from the provider on container startup.</p> Provider Name Config Value (<code>OPENVPN_PROVIDER</code>) IPVanish <code>IPVANISH</code> NordVPN <code>NORDVPN</code> Private Internet Access <code>PIA</code> VyprVpn <code>VYPRVPN</code>"},{"location":"supported-providers/#external-providers","title":"External providers","text":"<p>These providers are fetched from config repo on startup. They have to be manually updated in that repo when the provider changes them.</p> <p>If you don't see your provider in the below list, check the config repo above. Still don't see your provider? Open a  to add it.</p> Provider Name Config Value (<code>OPENVPN_PROVIDER</code>) Anonine <code>ANONINE</code> AnonVPN <code>ANONVPN</code> BlackVPN <code>BLACKVPN</code> BTGuard <code>BTGUARD</code> Cryptostorm <code>CRYPTOSTORM</code> ExpressVPN <code>EXPRESSVPN</code> FastestVPN <code>FASTESTVPN</code> FreeVPN <code>FREEVPN</code> FrootVPN <code>FROOT</code> FrostVPN <code>FROSTVPN</code> Getflix <code>GETFLIX</code> GhostPath <code>GHOSTPATH</code> Giganews <code>GIGANEWS</code> HideMe <code>HIDEME</code> HideMyAss <code>HIDEMYASS</code> IntegrityVPN <code>INTEGRITYVPN</code> IronSocket <code>IRONSOCKET</code> Ivacy <code>IVACY</code> IVPN <code>IVPN</code> Mullvad <code>MULLVAD</code> OctaneVPN <code>OCTANEVPN</code> OVPN <code>OVPN</code> Privado <code>PRIVADO</code> PrivateVPN <code>PRIVATEVPN</code> ProtonVPN <code>PROTONVPN</code> proXPN <code>PROXPN</code> PureVPN <code>PUREVPN</code> RA4W VPN <code>RA4W</code> SaferVPN <code>SAFERVPN</code> SlickVPN <code>SLICKVPN</code> Smart DNS Proxy <code>SMARTDNSPROXY</code> SmartVPN <code>SMARTVPN</code> Surfshark <code>SURFSHARK</code> TigerVPN <code>TIGER</code> TorGuard <code>TORGUARD</code> Trust.Zone <code>TRUSTZONE</code> TunnelBear <code>TUNNELBEAR</code> VPNArea.com <code>VPNAREA</code> VPNBook.com <code>VPNBOOK</code> VPNFacile <code>VPNFACILE</code> VPNTunnel <code>VPNTUNNEL</code> VPNUnlimited <code>VPNUNLIMITED</code> VPN.AC <code>VPNAC</code> VPN.ht <code>VPNHT</code> Windscribe <code>WINDSCRIBE</code> ZoogVPN <code>ZOOGVPN</code>"}]}