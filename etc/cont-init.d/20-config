#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Make sure that we have enough information to start OpenVPN
if [[ -z "${OPENVPN_PROVIDER}" ]]; then
  echo "ERROR: OPENVPN_PROVIDER must be set to execute configure-openvpn.sh that downloads ovpn files." && exit 1
fi

if [[ -n "${REVISION}" ]]; then
  echo "Starting container with revision: ${REVISION}"
fi

# Test DNS resolution
if ! nslookup "${HEALTH_CHECK_HOST:-'google.com'}" &>/dev/null; then
  echo "WARNING: initial DNS resolution test failed"
fi

# create /dev/net/tun
if [[ "${CREATE_TUN_DEVICE,,}" == "true" ]]; then
  echo "Creating TUN device /dev/net/tun"
  mkdir -p /dev/net
  mknod /dev/net/tun c 10 200
  chmod 0666 /dev/net/tun
fi

# setup OpenVPN - this means downloading config(s), and set user/password if not using docker secrets

export VPN_PROVIDER_HOME="/etc/openvpn/${OPENVPN_PROVIDER,,}"

if [[ -x "${VPN_PROVIDER_HOME}/configure-openvpn.sh" ]]; then
  echo "Executing configure-openvpn.sh to download ovpn files for ${OPENVPN_PROVIDER}"
  "${VPN_PROVIDER_HOME}/configure-openvpn.sh"
else
  # shellcheck source=openvpn/fetch-external-configs.sh
  /etc/openvpn/fetch-external-configs.sh
fi

if [[ -n "${OPENVPN_CONFIG}" ]]; then
  # Check that the chosen config exists.
  if [[ -f "${VPN_PROVIDER_HOME}/${OPENVPN_CONFIG}.ovpn" ]]; then
    echo "Starting OpenVPN using config ${OPENVPN_CONFIG}.ovpn"
    CHOSEN_OPENVPN_CONFIG="${VPN_PROVIDER_HOME}/${OPENVPN_CONFIG}.ovpn"
    # ensure the run script can get this variable
    printf '%s' "${CHOSEN_OPENVPN_CONFIG}" > /var/run/s6/container_environment/CHOSEN_OPENVPN_CONFIG
  else
    echo "Supplied config ${OPENVPN_CONFIG}.ovpn could not be found."
    echo "Your options for this provider are:"
    find "${VPN_PROVIDER_HOME}" -type f -iname "*.ovpn" -print
    echo "Remember to not specify .ovpn as part of the config name."
    exit 1
  fi
else
  echo "No VPN configuration provided. Using default."
  CHOSEN_OPENVPN_CONFIG="${VPN_PROVIDER_HOME}/default.ovpn"
  # ensure the run script can get this variable
  printf '%s' "${CHOSEN_OPENVPN_CONFIG}" > /var/run/s6/container_environment/CHOSEN_OPENVPN_CONFIG
fi

# set path to vpncreds
if [[ -f /run/secrets/vpncreds ]]; then
  sed -i "s#auth-user-pass.*#auth-user-pass /run/secrets/vpncreds#g" "${CHOSEN_OPENVPN_CONFIG}"
else
  sed -i "s#auth-user-pass.*#auth-user-pass /config/vpncreds#g" "${CHOSEN_OPENVPN_CONFIG}"
fi

# add OpenVPN user/pass or use docker secrets
if [[ ! -f /run/secrets/vpncreds ]]; then
  if [[ -z "${OPENVPN_USERNAME}" ]] || [[ -z "${OPENVPN_PASSWORD}" ]]; then
    if [[ ! -f /config/vpncreds ]]; then
      echo "OpenVPN credentials not set. Exiting."
      exit 1
    fi
    echo "OpenVPN credentials found"
  else
    echo "Setting OpenVPN credentials..."
    mkdir -p /config
    chmod 750 /config
    chown root:abc /config
    echo "${OPENVPN_USERNAME}" > /config/vpncreds
    echo "${OPENVPN_PASSWORD}" >> /config/vpncreds
    chmod 0440 /config/vpncreds
    chown root:abc /config/vpncreds
  fi
fi

# If we use UFW or the LOCAL_NETWORK we need to grab network config info
if [[ "${ENABLE_UFW,,}" == "true" ]] || [[ -n "${LOCAL_NETWORK}" ]]; then
  eval "$(/sbin/ip route list match 0.0.0.0 | awk '{if($5!="tun0"){print "GW="$3"\nINT="$5; exit}}')"
  # IF we use UFW_ALLOW_GW_NET along with ENABLE_UFW we need to know what our netmask CIDR is
  if [[ "${ENABLE_UFW,,}" == "true" ]] && [[ "${UFW_ALLOW_GW_NET,,}" == "true" ]]; then
    eval "$(/sbin/ip route list dev "${INT}" | awk '{if($5=="link"){print "GW_CIDR="$1; exit}}')"
  fi
fi

# Open port to any address
function ufwAllowPort {
  portNum=${1}
  if [[ "${ENABLE_UFW,,}" == "true" ]] && [[ -n "${portNum}" ]]; then
    echo "allowing ${portNum} through the firewall"
    ufw allow "${portNum}"
  fi
}

# Open port to specific address
function ufwAllowPortLong {
  portNum=${1}
  sourceAddress=${2}

  if [[ "${ENABLE_UFW,,}" == "true" ]] && [[ -n "${portNum}" ]] && [[ -n "${sourceAddress}" ]]; then
    echo "allowing ${sourceAddress} through the firewall to port ${portNum}"
    ufw allow from "${sourceAddress}" proto tcp to any port "${portNum}"
  fi
}

if [[ "${ENABLE_UFW,,}" == "true" ]]; then
  # Enable firewall
  echo "enabling firewall"
  sed -i 's/IPV6=yes/IPV6=no/' /etc/default/ufw
  ufw enable

  if [[ -n "${UFW_EXTRA_PORTS}" ]]; then
    for port in ${UFW_EXTRA_PORTS//,/ }; do
      if [[ "${UFW_ALLOW_GW_NET,,}" == "true" ]]; then
        ufwAllowPortLong "${port}" "${GW_CIDR}"
      else
        ufwAllowPortLong "${port}" "${GW}"
      fi
    done
  fi
fi

if [[ -n "${LOCAL_NETWORK}" ]]; then
  if [[ -n "${GW}" ]] && [[ -n "${INT}" ]]; then
    for localNet in ${LOCAL_NETWORK//,/ }; do
      echo "adding route to local network ${localNet} via ${GW} dev ${INT}"
      /sbin/ip route add "${localNet}" via "${GW}" dev "${INT}"
      if [[ "${ENABLE_UFW,,}" == "true" ]]; then
        if [[ -n "${UFW_EXTRA_PORTS}" ]]; then
          for port in ${UFW_EXTRA_PORTS//,/ }; do
            ufwAllowPortLong "${port}" "${localNet}"
          done
        fi
      fi
    done
  fi
fi
